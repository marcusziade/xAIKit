@Tutorial(time: 20) {
    @XcodeRequirement(title: "Xcode 16.0 or later", destination: "https://developer.apple.com/xcode/")
    
    @Intro(title: "Working with Structured Outputs") {
        Learn how to use structured outputs to get consistent, type-safe JSON responses from AI models. This tutorial covers both approaches: the robust `json_schema` method (OpenAI) and the `json_object` method (xAI).
        
        **Recommendation**: Use `json_schema` when available (OpenAI) as it provides strict validation, type safety, and eliminates parsing errors. Fall back to `json_object` with detailed prompting for xAI compatibility.
        
        Note: xAI's beta parse API with Pydantic-style schemas is not yet implemented in this Swift SDK.
        
        @Image(source: "smart-assistant", alt: "An AI assistant providing structured responses")
    }
    
    @Section(title: "Understanding Structured Outputs") {
        @ContentAndMedia {
            Structured outputs ensure that AI responses follow a specific format, making them easier to parse and use in your applications. There are two main approaches:
            
            **1. `json_object` format** (supported by xAI): Guarantees JSON output but relies on prompting for structure.
            
            **2. `json_schema` format** (OpenAI-compatible): Enforces strict schema validation.
            
            In this tutorial, you'll build a recipe parser app that extracts structured recipe data from plain text descriptions.
            
            @Image(source: "smart-assistant", alt: "Structured data extraction concept")
        }
        
        @Steps {
            @Step {
                Create a new SwiftUI app project and add xAIKit as a dependency.
                
                @Code(name: "Package.swift", file: "structured-01-setup.swift")
            }
            
            @Step {
                Define your data models that represent the structured output you want to receive.
                
                @Code(name: "Models.swift", file: "structured-02-models.swift")
            }
            
            @Step {
                Create a view model that uses xAIKit to extract structured data from text. Note how we use `json_object` format with detailed prompting for xAI, and show the commented `json_schema` approach for OpenAI-compatible APIs.
                
                @Code(name: "RecipeParserViewModel.swift", file: "structured-03-viewmodel.swift")
            }
        }
    }
    
    @Section(title: "Building the UI") {
        @ContentAndMedia {
            Now let's create a SwiftUI interface that allows users to input recipe text and see the extracted structured data.
            
            @Image(source: "smart-assistant", alt: "Recipe parser UI")
        }
        
        @Steps {
            @Step {
                Create the main content view with a text editor for recipe input.
                
                @Code(name: "ContentView.swift", file: "structured-04-contentview.swift")
            }
            
            @Step {
                Add a view to display the parsed recipe data in a structured format.
                
                @Code(name: "RecipeDetailView.swift", file: "structured-05-detailview.swift")
            }
            
            @Step {
                Connect everything in your app's entry point.
                
                @Code(name: "RecipeParserApp.swift", file: "structured-06-app.swift")
            }
        }
    }
    
    @Section(title: "Advanced Structured Outputs") {
        @ContentAndMedia {
            Let's explore more advanced use cases for structured outputs, including nested objects and arrays.
            
            @Image(source: "smart-assistant", alt: "Advanced structured data")
        }
        
        @Steps {
            @Step {
                Update the model to handle more complex recipe data with nutritional information.
                
                @Code(name: "AdvancedModels.swift", file: "structured-07-advanced-models.swift")
            }
            
            @Step {
                Enhance the view model to request more detailed structured data.
                
                @Code(name: "AdvancedViewModel.swift", file: "structured-08-advanced-viewmodel.swift")
            }
            
            @Step {
                Create a comprehensive view to display all the structured data.
                
                @Code(name: "AdvancedRecipeView.swift", file: "structured-09-advanced-view.swift")
            }
        }
    }
    
    @Section(title: "JSON Schema - The Robust Approach") {
        @ContentAndMedia {
            JSON Schema provides the most robust way to ensure structured outputs. While currently supported by OpenAI's API, it offers strict validation and type safety that eliminates the need for extensive error handling.
            
            @Image(source: "smart-assistant", alt: "JSON Schema validation")
        }
        
        @Steps {
            @Step {
                Create a view model that uses JSON Schema for strict validation. Notice how the schema defines types, constraints, and required fields.
                
                @Code(name: "SchemaBasedViewModel.swift", file: "structured-11-jsonschema-viewmodel.swift")
            }
            
            @Step {
                Build a UI that lets users switch between json_object and json_schema modes to see the difference in robustness.
                
                @Code(name: "ModeSwitcherView.swift", file: "structured-12-mode-switcher.swift")
            }
        }
    }
    
    @Section(title: "Structured Output Methods Comparison") {
        @ContentAndMedia {
            Understanding the different approaches to structured outputs helps you choose the right method for your API provider.
            
            @Image(source: "smart-assistant", alt: "Structured output comparison")
        }
        
        @Steps {
            @Step {
                Compare the different structured output approaches: `json_object` (xAI), `json_schema` (OpenAI), and the future beta parse API.
                
                @Code(name: "StructuredOutputComparison.swift", file: "structured-10-schema-comparison.swift")
            }
        }
    }
}